
#include "DHT.h"
#include <WiFi.h>

#include<HTTPClient.h>
#include <Wire.h>
#include<Adafruit_BMP280.h>
#define DHTpin 13
#define DHTTYPE DHT11
#define MQ2_PIN 34
#define MQ9_PIN 35

#define ALTITUDE 18
#define SEA_LEVEL_PRESSURE 1013.25 

DHT dht(DHTpin, DHTTYPE);
Adafruit_BMP280 bmp;
const char* scriptURL = "https://script.google.com/macros/s/AKfycbyiAzJQMpLRrJMgIOypgsmLGc6z0T3sme9NCfbucYKowAScMXAnPrXsi8iQWLF-L6Hv/exec";


//variables for calliberation of sensor values......
float temp_slope = 1.0; // temperature
float temp_offset = 0.0;

float humidity_slope = 1.0; //humidity
float humidity_offset = 0.0;

//float a = 1000.0; //light intensity
//float b =-0.5; 
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/4ea90e61-5590-432f-bba0-eade272b5adf 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humidity;
  CloudFrequency sound_Level;
  int air_Quality;
  CloudLuminance light_Intensity;
  CloudTemperature temperature;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*   The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4*/
 
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  Serial.begin(115200); //Init serial port
  delay(10);


}
void loop() {
  ArduinoCloud.update();
   float rawPressure = bmp.readPressure() / 100.0;
   pressure = rawPressure / pow((1 - (ALTITUDE / 44330.0)), 5.255);
   pressure = 1008.02;
   //altitude = 1013.15;
   //bmp.readAltitude(SEA_LEVEL_PRESSURE);

  //light_Intensity = (analogRead(light_sensor));

  temperature = (dht.readTemperature()-1.899);
  float humidity = dht.readHumidity();
  hUMIDITY=(humidity * humidity_slope) + humidity_offset;
  int mq2Level = analogRead(MQ2_PIN)/21.66;
  int mq9Level = analogRead(MQ9_PIN)/21.66;
  air_quality = mq9Level;
  if(mq2Level < 60 && mq9Level < 60){
    air_QualityText = "Air Quality is Good";
  }
  else if(mq2Level > 60 && mq2Level<100 && mq9Level > 60 && mq9Level<100){
     air_QualityText = "Air Quality is Moderate";
  }
  else if(mq2Level > 100 && mq2Level<150 && mq9Level > 100 && mq9Level<150){
     air_QualityText = "Air Quality is Unhealthy for Sensitive Groups";
  }
   else if(mq2Level > 150 && mq2Level<300 && mq9Level > 1500 && mq9Level<300){
     air_QualityText = "Air Quality is Unhealthy";
  }
  //else if(mq2Level > 2000 && mq2Level<3000 && mq9Level > 2000 && mq9Level<3000){
    // air_QualityText = "Air Quality is Very Unhealthy";
 // }
   else if(mq2Level > 300 && mq2Level < 500 && mq9Level > 300 && mq9Level < 500){
     air_QualityText = "Air Quality is Hazardous";
  }

   if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;

    // Simulated sensor data — replace with real readings from sensors
    float airQuality = air_quality;     // value1
    float temp= temperature;     // value2
    float humid = hUMIDITY;
    // Construct URL with query parameters
    String fullURL = String(scriptURL) + "?value1=" + airQuality + "&value2=" + temperature + "&value3=" + humidity;
    Serial.println("Sending request to:");
    Serial.println(fullURL);

    http.begin(fullURL);
    int httpCode = http.GET();

    if (httpCode > 0) {
      String response = http.getString();
      Serial.println("Response from server:");
      Serial.println(response);
    } else {
      Serial.print("Error sending GET: ");
      Serial.println(http.errorToString(httpCode));
    }

    http.end();
    } else {
      Serial.println("WiFi Disconnected");
    }

    delay(1000);
}
/*
  Since AirQuality is READ_WRITE variable, onAirQualityChange() is
  executed every time a new value is received from IoT Cloud.

void onAirQualityChange()  {
  // Add your code here to act upon AirQuality change
}


  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.

void onTemperatureChange()  {
  // Add your code here to act upon Temperature change
}


/*
  Since LightIntensity is READ_WRITE variable, onLightIntensityChange() is
  executed every time a new value is received from IoT Cloud.

void onLightIntensityChange()  {
  // Add your code here to act upon LightIntensity change
}

/*
  Since SoundIntensity is READ_WRITE variable, onSoundIntensityChange() is
  executed every time a new value is received from IoT Cloud.

void onSoundIntensityChange()  {
  // Add your code here to act upon SoundIntensity change
}

/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.

void onHumidityChange()  {
  // Add your code here to act upon Humidity change
}

/*
  Since Level is READ_WRITE variable, onLevelChange() is
  executed every time a new value is received from IoT Cloud.

void onLevelChange()  {
  // Add your code here to act upon Level change
}

/*
  Since SoundLevel is READ_WRITE variable, onSoundLevelChange() is
  executed every time a new value is received from IoT Cloud.

void onSoundLevelChange()  {
  // Add your code here to act upon SoundLevel change
}
*/
